// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WomensWiki.Common;

#nullable disable

namespace WomensWiki.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250416112139_UseSnakeCaseTables")]
    partial class UseSnakeCaseTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.Property<Guid>("ArticlesId")
                        .HasColumnType("uuid")
                        .HasColumnName("articles_id");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid")
                        .HasColumnName("tags_id");

                    b.HasKey("ArticlesId", "TagsId")
                        .HasName("pk_article_tags");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_article_tags_tags_id");

                    b.ToTable("ArticleTags", (string)null);
                });

            modelBuilder.Entity("TagTag", b =>
                {
                    b.Property<Guid>("ParentTagsId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_tags_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.HasKey("ParentTagsId", "TagId")
                        .HasName("pk_child_tags");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_child_tags_tag_id");

                    b.ToTable("ChildTags", (string)null);
                });

            modelBuilder.Entity("WomensWiki.Domain.Articles.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("LatestVersion")
                        .HasColumnType("text")
                        .HasColumnName("latest_version");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_articles");

                    b.ToTable("articles", (string)null);
                });

            modelBuilder.Entity("WomensWiki.Domain.Colors.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_colors");

                    b.ToTable("colors", (string)null);
                });

            modelBuilder.Entity("WomensWiki.Domain.Revision", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid")
                        .HasColumnName("article_id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Summary")
                        .HasMaxLength(72)
                        .HasColumnType("character varying(72)")
                        .HasColumnName("summary");

                    b.HasKey("Id")
                        .HasName("pk_revisions");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("ix_revisions_article_id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_revisions_author_id");

                    b.ToTable("revisions", (string)null);
                });

            modelBuilder.Entity("WomensWiki.Domain.Tags.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uuid")
                        .HasColumnName("color_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("ColorId")
                        .HasDatabaseName("ix_tags_color_id");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("WomensWiki.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.HasOne("WomensWiki.Domain.Articles.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_article_tags_articles_articles_id");

                    b.HasOne("WomensWiki.Domain.Tags.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_article_tags_tags_tags_id");
                });

            modelBuilder.Entity("TagTag", b =>
                {
                    b.HasOne("WomensWiki.Domain.Tags.Tag", null)
                        .WithMany()
                        .HasForeignKey("ParentTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_child_tags_tags_parent_tags_id");

                    b.HasOne("WomensWiki.Domain.Tags.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_child_tags_tags_tag_id");
                });

            modelBuilder.Entity("WomensWiki.Domain.Revision", b =>
                {
                    b.HasOne("WomensWiki.Domain.Articles.Article", "Article")
                        .WithMany("History")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_revisions_articles_article_id");

                    b.HasOne("WomensWiki.Domain.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_revisions_users_author_id");

                    b.Navigation("Article");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("WomensWiki.Domain.Tags.Tag", b =>
                {
                    b.HasOne("WomensWiki.Domain.Colors.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tags_colors_color_id");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("WomensWiki.Domain.Articles.Article", b =>
                {
                    b.Navigation("History");
                });
#pragma warning restore 612, 618
        }
    }
}
